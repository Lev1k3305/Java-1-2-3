# Сражение с драконом

## Описание

Этот проект представляет собой консольную программу на Java, реализующую задание «Сражение с драконом» (Практическая работа №1). Программа запрашивает характеристики героя, проверяет его допуск к бою с драконом, определяет исход сражения, рассчитывает очки героя и присваивает соответствующий титул. Код написан с использованием класса `Scanner` для ввода данных и условных операторов для обработки логики.

## Возможности

1. **Ввод данных**:
   - Имя героя (строка, `String`).
   - Возраст героя (целое число, `int`).
   - Наличие лицензии на меч (логическое значение, `boolean`, `true`/`false`).
   - Наличие брони (логическое значение, `boolean`, `true`/`false`).
   - Уровень силы (целое число, `int`, в диапазоне 1–100).

2. **Проверка корректности ввода**:
   - Уровень силы проверяется на соответствие диапазону 1–100. При некорректном вводе выводится сообщение об ошибке, и программа завершается.

3. **Проверка допуска к бою**:
   - Герой допускается, если:
     - Возраст > 18 и есть лицензия на меч.
     - Или есть броня.
   - Если герой не допущен, выводится сообщение: `<имя>, вы слишком слабы и не можете участвовать в бою!`.

4. **Исход боя** (при допуске):
   - Сила < 30: «Вы проиграли дракону!».
   - Сила 30–60: «Вы сражались достойно, но дракон улетел!».
   - Сила > 60: «Поздравляем! Вы победили дракона!».

5. **Расчёт очков героя**:
   - Формула: `очки = возраст / 2 + сила + (броня ? 20 : 0) + (лицензия ? 10 : 0)`.

6. **Присвоение титула**:
   - < 50 очков: «Новичок».
   - 50–100 очков: «Рыцарь».
   - > 100 очков: «Легендарный герой».

## Установка и запуск

1. Убедитесь, что установлен Java Development Kit (JDK) версии 8 или выше.
2. Сохраните код в файл `HeroCheck.java`.
3. Скомпилируйте программу:
   ```bash
   javac HeroCheck.java
   ```
4. Запустите программу:
   ```bash
   java HeroCheck
   ```
5. Следуйте инструкциям в консоли для ввода данных героя.

## Пример работы программы

### Успешный бой
```
Введите имя героя: Артур
Введите возраст героя: 20
Есть ли лицензия на меч? (true/false): true
Есть ли броня? (true/false): true
Введите уровень силы героя (1–100): 100
Артур, вы допущены к бою с драконом!
Поздравляем! Вы победили дракона!
Очки героя: 140
Ваш титул: Легендарный герой
```

### Отказ в допуске
```
Введите имя героя: Ергали
Введите возраст героя: 12
Есть ли лицензия на меч? (true/false): false
Есть ли броня? (true/false): false
Введите уровень силы героя (1–100): 2
Ергали, вы слишком слабы и не можете участвовать в бою!
```

### Некорректный ввод
```
Введите имя героя: Анна
Введите возраст героя: 25
Есть ли лицензия на меч? (true/false): true
Есть ли броня? (true/false): false
Введите уровень силы героя (1–100): 150
Ошибка: уровень силы должен быть в диапазоне 1–100!
```

## Контрольные вопросы

1. **Для чего используется класс Scanner?**  
   Класс `Scanner` из пакета `java.util` предназначен для чтения пользовательского ввода из различных источников, таких как консоль (`System.in`). В программе он используется для ввода имени, возраста, наличия лицензии/брони и уровня силы героя.

2. **Почему важно закрывать объект Scanner?**  
   Закрытие объекта `Scanner` с помощью метода `close()` освобождает системные ресурсы, связанные с вводом (например, `System.in`). Это предотвращает утечки памяти и потенциальные проблемы в больших приложениях, особенно при многократном использовании ввода.

## Требования

- **JDK**: версия 8 или выше.
- **Знания**: базовые навыки работы с Java, включая ввод/вывод, условные операторы и работу с классом `Scanner`.
- **Зависимости**: стандартная библиотека Java (`java.util.Scanner`).

## Примечания

- Программа использует аннотацию `@SuppressWarnings("ConvertToTryWithResources")` для подавления предупреждений о возможности использования try-with-resources, так как код следует простому подходу к управлению ресурсами.
- Код структурирован для удобства чтения, с последовательной обработкой ввода, проверки условий и вывода результатов.
- Проверка диапазона силы (1–100) обеспечивает корректность данных перед выполнением основной логики.