# Мини-RPG

## Описание

Этот проект представляет собой консольную игру на Java, реализующую задание «Мини-RPG» (Практическая работа №2). Игрок управляет героем, который сражается с тремя монстрами в последовательных раундах, выбирая действия: атаковать, лечиться или убежать. За победу над монстром герой получает опыт, что позволяет повышать уровень и увеличивать силу атаки. Программа использует массивы для хранения характеристик героя, циклы для организации боёв, методы для разделения логики и класс `Random` для рандомизации действий.

## Возможности

1. **Характеристики героя**:
   - Хранятся в массиве `int[] hero`: [HP, XP, LVL, ATTACK].
   - Начальные значения: [100, 0, 1, 10] (100 HP, 0 XP, уровень 1, атака 10).

2. **Монстры**:
   - Три последовательных боя, каждый с новым монстром.
   - Здоровье монстра: `15 + номер_раунда * 10` (25, 35, 45 HP для раундов 1, 2, 3).
   - Базовый урон монстра: `5 + номер_раунда * 3` (8, 11, 14 для раундов 1, 2, 3).

3. **Действия игрока**:
   - Выбор через `switch-case`:
     - 1: Атаковать.
     - 2: Лечиться.
     - 3: Убежать (50% шанс успеха).
   - Неверный выбор приводит к пропуску хода и атаке монстра.

4. **Рандомизация** (с использованием `java.util.Random`):
   - Урон героя: базовая атака + случайное значение [0, 5].
   - Лечение: случайное значение [10, 30], с ограничением максимального здоровья (100 HP).
   - Урон монстра: базовый урон + случайное значение [0, 3].
   - Шанс побега: 50% (`random.nextBoolean()`).

5. **Игровой цикл**:
   - Внешний цикл `for` для трёх раундов.
   - Внутренний цикл `while` для каждого боя (продолжается, пока герой и монстр живы или пока игрок не сбежит).
   - После каждого раунда проверяется состояние героя и монстра.

6. **Повышение уровня**:
   - За победу над монстром: +20 XP.
   - Уровень повышается, если XP ≥ текущий_уровень * 50.
   - При повышении уровня атака увеличивается на 5.

7. **Условия завершения**:
   - Победа: игрок завершает все три боя (победа над монстром или успешный побег).
   - Проигрыш: здоровье героя (HP) ≤ 0.
   - При завершении игры выводятся финальные характеристики героя (уровень, опыт, здоровье).

## Установка и запуск

1. Убедитесь, что установлен Java Development Kit (JDK) версии 8 или выше.
2. Сохраните код в файл `monsterbattle.java`.
3. Скомпилируйте программу:
   ```bash
   javac monsterbattle.java
   ```
4. Запустите программу:
   ```bash
   java monsterbattle
   ```
5. Следуйте инструкциям в консоли, выбирая действия (1, 2, 3) для каждого хода.

## Пример работы программы

```
Раунд 1: Появился монстр с 25 HP!

Герой: HP = 100, XP = 0, Уровень = 1
Монстр: HP = 25
Выберите действие: 1 - Атаковать, 2 - Лечиться, 3 - Убежать
1
Герой нанёс 12 урона!
Монстр нанёс 7 урона!

Герой: HP = 93, XP = 0, Уровень = 1
Монстр: HP = 13
Выберите действие: 1 - Атаковать, 2 - Лечиться, 3 - Убежать
1
Герой нанёс 14 урона!
Монстр побеждён!
Герой повысил уровень! Новый уровень: 2, Атака: 15

Раунд 2: Появился монстр с 35 HP!
...
Герой: HP = 80, XP = 20, Уровень = 2
Монстр: HP = 20
Выберите действие: 1 - Атаковать, 2 - Лечиться, 3 - Убежать
3
Побег не удался!
Монстр нанёс 12 урона!
...
Игра завершена!
Финальные характеристики героя:
Уровень: 2
Опыт: 40
Здоровье: 65
```

## Контрольные вопросы

1. **Что такое массив и для чего он используется?**  
   Массив — это структура данных для хранения набора элементов одного типа с доступом по индексу. В программе массив `int[] hero` используется для хранения характеристик героя (HP, XP, LVL, ATTACK), а массив `int[] monster` — для здоровья монстра.

2. **Чем отличается цикл for от while?**  
   Цикл `for` используется, когда количество итераций заранее известно (например, три боя в игре). Цикл `while` применяется, когда условие завершения зависит от динамических факторов (например, бой продолжается, пока герой или монстр живы).

3. **Что делает оператор break?**  
   Оператор `break` прерывает выполнение цикла или блока `switch-case`, переходя к следующему блоку кода. В программе он используется в `switch-case` для завершения обработки действия и в цикле боя при победе или побеге.

4. **Как работает оператор switch-case?**  
   Оператор `switch` проверяет значение переменной (например, `choice`) и выполняет соответствующий блок `case`. В игре он обрабатывает выбор действий игрока (1 — атаковать, 2 — лечиться, 3 — убежать).

5. **Зачем нужен оператор default в switch-case?**  
   Блок `default` выполняется, если ни один `case` не соответствует значению переменной. В программе он обрабатывает неверный ввод, пропуская ход игрока и позволяя монстру атаковать.

## Требования

- **JDK**: версия 8 или выше.
- **Знания**: базовые навыки работы с Java, включая массивы, циклы, методы, классы `Scanner` и `Random`.
- **Зависимости**: стандартная библиотека Java (`java.util.Scanner`, `java.util.Random`).

## Примечания

- Программа использует `try-with-resources` для автоматического закрытия объекта `Scanner`, что предотвращает утечки ресурсов.
- Для генерации случайных чисел используется класс `Random`, обеспечивающий рандомизацию урона, лечения и шанса побега.
- Код структурирован с использованием отдельных методов (`attack`, `heal`, `monsterAttack`, `levelUp`) для повышения читаемости и модульности.
- Начальная атака героя (10) ниже, чем в исходном задании (20), что соответствует предоставленному коду.
- Программа не использует Unicode-символы для вывода, в отличие от примеров в задании, но это можно добавить для улучшения визуального восприятия.
