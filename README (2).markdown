# Лабиринт

## Описание

Этот проект представляет собой консольную игру на Java, реализующую задание «Лабиринт» (Практическая работа №3). Игрок управляет героем, перемещающимся по лабиринту размером 10x10, чтобы достичь выхода, сражаясь с монстрами. Программа использует двумерные массивы для представления лабиринта, циклы и методы для обработки игровой логики, а также класс `Random` для рандомизации действий в бою. 

**Примечание**: Код не включает дополнительные задания (ключ, ограничение шагов, зелья/ловушки), но полностью соответствует базовым требованиям задания, включая управление героем, бои с монстрами и достижение выхода.

## Возможности

1. **Лабиринт**:
   - Двумерный массив `char[][]` размером 10x10.
   - Символы:
     - '#' — стена (столкновение отнимает 20 HP).
     - '_' — пустое место.
     - 'P' — игрок.
     - 'M' — монстр (запускает бой).
     - 'E' — выход (достижение завершает игру).

2. **Характеристики героя**:
   - Хранятся в массиве `int[] hero`: [HP, XP, LVL, ATTACK].
   - Начальные значения: [100, 0, 1, 20].

3. **Управление**:
   - Клавиши: `w` (вверх), `a` (влево), `s` (вниз), `d` (вправо).
   - Движение запрещено через стены или за пределы лабиринта.

4. **Бои с монстрами**:
   - При встрече с символом 'M' начинается бой.
   - Характеристики монстра: здоровье (30 HP), базовый урон (10).
   - Действия игрока (через `switch-case`):
     - 1: Атаковать (урон: базовая атака + случайное значение 0–5).
     - 2: Лечиться (восстановление 10–30 HP, максимум 100 HP).
     - 3: Убежать (50% шанс успеха).
   - Монстр наносит урон: базовый урон + случайное значение 0–3.

5. **Игровой цикл**:
   - Цикл `while` продолжается, пока герой не достигнет выхода ('E') или не погибнет (HP ≤ 0).
   - После каждого хода отображается лабиринт и характеристики героя.

6. **Условия завершения**:
   - Победа: достижение клетки с символом 'E'.
   - Проигрыш: здоровье героя (HP) ≤ 0 (от столкновений со стенами или в бою).
   - При победе выводятся финальные характеристики героя (уровень, опыт, здоровье).

7. **Рандомизация**:
   - Используется класс `Random` для генерации случайных значений:
     - Урон героя: базовая атака + `random.nextInt(6)`.
     - Лечение: 10 + `random.nextInt(21)`.
     - Урон монстра: базовый урон + `random.nextInt(4)`.
     - Шанс побега: 50% (`random.nextBoolean()`).

## Установка и запуск

1. Убедитесь, что установлен Java Development Kit (JDK) версии 8 или выше.
2. Сохраните код в файл `MazeGame.java`.
3. Скомпилируйте программу:
   ```bash
   javac MazeGame.java
   ```
4. Запустите программу:
   ```bash
   java MazeGame
   ```
5. Используйте клавиши `w`, `a`, `s`, `d` для перемещения по лабиринту и числа (1, 2, 3) для действий в бою.

## Пример работы программы

```
# # # # # # # # # #
# P _ _ # _ M _ _ #
# _ # _ # _ # # _ #
# _ # _ _ _ _ _ _ #
# _ # # # # _ # _ #
# _ _ _ _ # _ # _ #
# _ # # _ # _ # _ #
# _ # _ _ _ _ _ M #
# _ _ _ # # # _ E #
# # # # # # # # # #
Герой: HP = 100, XP = 0, Уровень = 1
Введите команду (w/a/s/d): d
# # # # # # # # # #
# _ P _ # _ M _ _ #
# _ # _ # _ # # _ #
# _ # _ _ _ _ _ _ #
# _ # # # # _ # _ #
# _ _ _ _ # _ # _ #
# _ # # _ # _ # _ #
# _ # _ _ _ _ _ M #
# _ _ _ # # # _ E #
# # # # # # # # # #
Герой: HP = 100, XP = 0, Уровень = 1
Введите команду (w/a/s/d): d
Встречен монстр! Начинается бой!
Герой: HP = 100, XP = 0, Уровень = 1
Монстр: HP = 30
Выберите действие: 1 - Атаковать, 2 - Лечиться, 3 - Убежать
1
Герой нанёс 23 урона!
Монстр нанёс 12 урона!
...
Монстр побеждён!
Герой повысил уровень! Новый уровень: 2, Атака: 25
```

## Контрольные вопросы

1. **Что такое метод (функция)?**  
   Метод — это блок кода, выполняющий определённую задачу, который можно вызывать многократно с различными параметрами. В программе методы, такие как `attack`, `heal`, `printMaze`, используются для обработки атак, лечения и отображения лабиринта.

2. **Как объявить метод, который принимает параметры и возвращает результат?**  
   Пример: `public static boolean battle(int[] hero, Random random)` — метод принимает массив характеристик героя и объект `Random` для генерации случайных чисел, возвращает `boolean` (результат боя: `true` — победа или побег, `false` — поражение).

3. **В чём преимущество вынесения логики в отдельные методы?**  
   - **Модульность**: код становится более читаемым и организованным.
   - **Повторное использование**: методы, такие как `attack` и `heal`, могут использоваться в разных частях программы.
   - **Упрощение поддержки**: изменения в логике вносятся в одном месте, что облегчает отладку и модификацию.

4. **Почему методы «атаковать» и «лечиться» удобно сделать отдельными функциями?**  
   - **Читаемость**: разделение логики атаки и лечения делает код понятнее.
   - **Переиспользование**: методы используются в каждом бою с монстром.
   - **Гибкость**: упрощает добавление новых механик или изменение существующих (например, изменение диапазона урона или лечения).

## Требования

- **JDK**: версия 8 или выше.
- **Знания**: базовые навыки работы с Java, включая двумерные массивы, циклы, методы, классы `Scanner` и `Random`.
- **Зависимости**: стандартная библиотека Java (`java.util.Scanner`, `java.util.Random`).

## Примечания

- Программа использует `try-with-resources` для автоматического закрытия объекта `Scanner`, что предотвращает утечки ресурсов.
- Для генерации случайных чисел используется класс `Random` вместо `RandomGenerator`, что соответствует предоставленному коду.
- Метод `clearConsole` имитирует очистку консоли путём вывода 50 пустых строк.
- Лабиринт реализован как статический массив, но может быть легко модифицирован для динамической генерации.
- Код не включает дополнительные задания (ключ, ограничение шагов, зелья/ловушки), но полностью соответствует базовым требованиям задания «Лабиринт».